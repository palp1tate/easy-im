name: CI/CD
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.22
          cache-dependency-path: ./go.mod
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.22
          cache-dependency-path: ./go.mod
      - name: Run gofumpt
        run: |
          go install mvdan.cc/gofumpt@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          find . -name '*.go' | grep -v pb | xargs gofumpt -l -w
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --issues-exit-code=0 --timeout=5m
  release-and-push:
    name: Release and Push
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
    if: github.repository == 'palp1tate/easy-im' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: -1
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Fetch Previous version
        id: get-previous-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
      - name: Release
        run: yarn global add semantic-release@23.1.1 && semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
      - name: Fetch Current version
        id: get-current-tag
        uses: actions-ecosystem/action-get-latest-tag@v1
      - name: Set version tags as environment variables
        run: |
          echo "old_version=${{ steps.get-previous-tag.outputs.tag }}" >> $GITHUB_ENV
          echo "new_version=${{ steps.get-current-tag.outputs.tag }}" >> $GITHUB_ENV
      - name: Decide Should_Push Or Not
        id: should_push
        run: |
          if [ "$old_version" != "$new_version" ]
          then
              echo "should_push=true" >> $GITHUB_ENV
          else
              echo "should_push=false" >> $GITHUB_ENV
          fi
      - name: Set up QEMU
        if: env.should_push == 'true'
        uses: docker/setup-qemu-action@v3
      - name: Set up buildx
        id: buildx
        if: env.should_push == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      - name: Log in to Docker Hub
        if: env.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push easy-im-user-rpc Image
        if: env.should_push == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/dockerfile/user-rpc.Dockerfile
          push: true
          tags: palp1tate/easy-im-user-rpc:${{ env.new_version }},palp1tate/easy-im-user-rpc:latest
          platforms: linux/amd64